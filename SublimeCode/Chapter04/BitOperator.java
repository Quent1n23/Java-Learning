//位运算

public class BitOperator{

	//编写一个main方法
	public static void main(String[] args) {
		/*
		1. 2的原码 00000000 00000000 00000000 00000010
		   2的补码 00000000 00000000 00000000 00000010
		2. 3的原码 00000000 00000000 00000000 00000011
		   3的补码 00000000 00000000 00000000 00000011
		3. 按位&
			00000000 00000000 00000000 00000010
			00000000 00000000 00000000 00000011
			00000000 00000000 00000000 00000010  &运算后的补码  
			正数 原码也是这个 结果是2
		*/
		System.out.println(2 & 3);//2

		/*
		1. -2的原码 10000000 00000000 00000000 00000010
		2. -2的反码 11111111 11111111 11111111 11111101 符号位不变，其他位取反
		3. -2的补码 11111111 11111111 11111111 11111110 反码+1
		4. ~-2 操作 00000000 00000000 00000000 00000001 
		5. 运算后的原码 00000000 00000000 00000000 00000001   ~按位取反
		*/

		System.out.println(~ -2); //1

		/*
		1. 2的补码 00000000 00000000 00000000 00000010
		2. ~2操作  11111111 11111111 11111111 11111101  运算后的补码
		3. 运算后的反码 11111111 11111111 11111111 11111100
		4. 运算后的原码 10000000 00000000 00000000 00000011 => -3
		*/

		System.out.println(~ 2);




	}
}